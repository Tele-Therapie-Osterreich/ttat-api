// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "github.com/Tele-Therapie-Osterreich/ttat-api/db"
import mock "github.com/stretchr/testify/mock"
import model "github.com/Tele-Therapie-Osterreich/ttat-api/model"

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AbandonTherapistEdits provides a mock function with given fields: thID
func (_m *DB) AbandonTherapistEdits(thID int) error {
	ret := _m.Called(thID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(thID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckLoginToken provides a mock function with given fields: token
func (_m *DB) CheckLoginToken(token string) (string, string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateLoginToken provides a mock function with given fields: email, language
func (_m *DB) CreateLoginToken(email string, language string) (string, error) {
	ret := _m.Called(email, language)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, language)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: thID
func (_m *DB) CreateSession(thID int) (string, error) {
	ret := _m.Called(thID)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(thID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(thID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSessions provides a mock function with given fields: thID
func (_m *DB) DeleteSessions(thID int) error {
	ret := _m.Called(thID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(thID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTherapist provides a mock function with given fields: thID
func (_m *DB) DeleteTherapist(thID int) error {
	ret := _m.Called(thID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(thID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageByID provides a mock function with given fields: imgID
func (_m *DB) ImageByID(imgID int) (*model.Image, error) {
	ret := _m.Called(imgID)

	var r0 *model.Image
	if rf, ok := ret.Get(0).(func(int) *model.Image); ok {
		r0 = rf(imgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(imgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageByProfileID provides a mock function with given fields: prID
func (_m *DB) ImageByProfileID(prID int) (*model.Image, error) {
	ret := _m.Called(prID)

	var r0 *model.Image
	if rf, ok := ret.Get(0).(func(int) *model.Image); ok {
		r0 = rf(prID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(prID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email
func (_m *DB) Login(email string) (*model.TherapistInfo, bool, error) {
	ret := _m.Called(email)

	var r0 *model.TherapistInfo
	if rf, ok := ret.Get(0).(func(string) *model.TherapistInfo); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TherapistInfo)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LookupSession provides a mock function with given fields: token
func (_m *DB) LookupSession(token string) (*int, error) {
	ret := _m.Called(token)

	var r0 *int
	if rf, ok := ret.Get(0).(func(string) *int); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TherapistByID provides a mock function with given fields: thID
func (_m *DB) TherapistByID(thID int) (*model.Therapist, error) {
	ret := _m.Called(thID)

	var r0 *model.Therapist
	if rf, ok := ret.Get(0).(func(int) *model.Therapist); ok {
		r0 = rf(thID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Therapist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(thID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TherapistInfoByEmail provides a mock function with given fields: email
func (_m *DB) TherapistInfoByEmail(email string) (*model.TherapistInfo, error) {
	ret := _m.Called(email)

	var r0 *model.TherapistInfo
	if rf, ok := ret.Get(0).(func(string) *model.TherapistInfo); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TherapistInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TherapistInfoByID provides a mock function with given fields: thID, profile
func (_m *DB) TherapistInfoByID(thID int, profile db.ProfileSelection) (*model.TherapistInfo, error) {
	ret := _m.Called(thID, profile)

	var r0 *model.TherapistInfo
	if rf, ok := ret.Get(0).(func(int, db.ProfileSelection) *model.TherapistInfo); ok {
		r0 = rf(thID, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TherapistInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, db.ProfileSelection) error); ok {
		r1 = rf(thID, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TherapistProfileByTherapistID provides a mock function with given fields: thID, public
func (_m *DB) TherapistProfileByTherapistID(thID int, public bool) (*model.TherapistProfile, error) {
	ret := _m.Called(thID, public)

	var r0 *model.TherapistProfile
	if rf, ok := ret.Get(0).(func(int, bool) *model.TherapistProfile); ok {
		r0 = rf(thID, public)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TherapistProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(thID, public)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTherapistProfile provides a mock function with given fields: thID, patch
func (_m *DB) UpdateTherapistProfile(thID int, patch []byte) (*model.ImagePatch, error) {
	ret := _m.Called(thID, patch)

	var r0 *model.ImagePatch
	if rf, ok := ret.Get(0).(func(int, []byte) *model.ImagePatch); ok {
		r0 = rf(thID, patch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ImagePatch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, []byte) error); ok {
		r1 = rf(thID, patch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertImage provides a mock function with given fields: image
func (_m *DB) UpsertImage(image *model.Image) (*model.Image, error) {
	ret := _m.Called(image)

	var r0 *model.Image
	if rf, ok := ret.Get(0).(func(*model.Image) *model.Image); ok {
		r0 = rf(image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Image) error); ok {
		r1 = rf(image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
