// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/Tele-Therapie-Osterreich/ttat-api/model"

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// CheckLoginToken provides a mock function with given fields: token
func (_m *DB) CheckLoginToken(token string) (string, string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateLoginToken provides a mock function with given fields: email, language
func (_m *DB) CreateLoginToken(email string, language string) (string, error) {
	ret := _m.Called(email, language)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, language)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: userID
func (_m *DB) CreateSession(userID int) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSessions provides a mock function with given fields: userID
func (_m *DB) DeleteSessions(userID int) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *DB) DeleteUser(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageByID provides a mock function with given fields: id
func (_m *DB) ImageByID(id int) (*model.Image, error) {
	ret := _m.Called(id)

	var r0 *model.Image
	if rf, ok := ret.Get(0).(func(int) *model.Image); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageByUserID provides a mock function with given fields: id
func (_m *DB) ImageByUserID(id int) (*model.Image, error) {
	ret := _m.Called(id)

	var r0 *model.Image
	if rf, ok := ret.Get(0).(func(int) *model.Image); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: email
func (_m *DB) LoginUser(email string) (*model.User, *model.Image, bool, error) {
	ret := _m.Called(email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.Image
	if rf, ok := ret.Get(1).(func(string) *model.Image); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Image)
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(email)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// LookupSession provides a mock function with given fields: token
func (_m *DB) LookupSession(token string) (*int, error) {
	ret := _m.Called(token)

	var r0 *int
	if rf, ok := ret.Get(0).(func(string) *int); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: therapist
func (_m *DB) UpdateUser(therapist *model.User) error {
	ret := _m.Called(therapist)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(therapist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertImage provides a mock function with given fields: image
func (_m *DB) UpsertImage(image *model.Image) (*model.Image, error) {
	ret := _m.Called(image)

	var r0 *model.Image
	if rf, ok := ret.Get(0).(func(*model.Image) *model.Image); ok {
		r0 = rf(image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Image) error); ok {
		r1 = rf(image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserByID provides a mock function with given fields: id
func (_m *DB) UserByID(id int) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(int) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
