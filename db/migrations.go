// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/0001-initial-schema.sql

package db


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMigrations0001initialschemasql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x77\xda\xca\x11\x7f\xe7\x53\xcc\xc9\x4b\xf0\x2d\xe0\x3e\xf5" +
	"\x21\x69\x9b\xb3\x46\x6b\x5b\x37\x42\x72\x24\x71\x1d\xda\xd3\xc3\x59\x4b\x03\x6c\x23\xb4\x54\xbb\x98\xf0\xed\x7b" +
	"\x66\x57\x82\x15\xb6\x73\x73\x9f\xae\x5e\x0c\x9a\x99\xdf\xfc\xd9\x99\xdf\x8e\x19\x8f\xe1\x2f\x5b\xb9\x6e\x84\x41" +
	"\x98\xef\x06\x83\xf1\x18\xbe\xcc\x79\x96\x87\x49\xfc\x01\x1e\xef\x59\xfe\x3e\x83\xfc\x9e\x43\x1a\xde\xdd\xe7\xf0" +
	"\xc8\x16\x90\x27\x70\xcf\xe2\x20\xe2\x10\xb0\x9c\xdd\xb0\x8c\xc3\xfc\x21\x60\x39\xcf\x80\xc5\x01\x01\xdc\x87\x59" +
	"\x9e\xa4\x0b\xb8\xe7\x29\xff\x04\xd9\x7d\x32\x8f\x82\xd3\xcb\x1b\x0e\x3c\x0a\x03\x1e\x8c\x20\x9c\xf0\x89\x05\x27" +
	"\x20\xc8\x9d\x33\xd2\xe2\x16\x26\x8c\x4f\x42\xeb\x25\xcc\x80\x45\x51\xf2\xc8\x03\x48\xe2\xc8\x06\x32\x0b\xd3\x34" +
	"\x49\x81\x7f\x65\xd3\x3c\x5a\xd8\x78\xad\xcd\x3c\xe3\x29\x41\x64\x6c\x91\x8d\x20\x4e\x72\x52\xb6\xc8\x6d\x1c\xe1" +
	"\x94\x45\x30\x64\x71\x00\x71\x02\x51\x12\xdf\xf1\x14\xa6\x49\x9a\xf2\x69\x7e\x65\x3d\x4e\x06\xe3\x31\x21\xcc\x16" +
	"\x90\xdf\x87\xf1\xe7\x30\xbe\x03\x76\x93\xcc\x09\x3f\xcc\x28\x16\x8a\x17\xc2\x5b\x58\x24\x73\x78\x64\xb1\x75\x71" +
	"\xc3\x21\xcb\xd3\x70\x9a\xb7\xba\x84\x44\x28\x0f\x69\x92\xf3\x29\x15\x75\x44\xf1\xc5\xd6\x28\x48\x6c\x64\x2e\xac" +
	"\x5f\x58\xbc\xf8\xc5\x0f\xce\xd6\xe4\x86\x2f\x12\x57\xd3\xf6\x28\xf8\xd7\x87\x28\x9c\x86\x94\x6c\xca\xbf\xcc\xc3" +
	"\x94\x07\xe4\xf7\x21\x4d\x7e\x0b\x03\x6e\x73\xbf\x9d\xc7\xd6\x13\x8b\xc2\x7c\x01\xc9\xad\x7d\x99\x85\x39\x27\x98" +
	"\x3c\x81\x30\xcf\x6c\x7d\xb2\x89\xab\x70\x98\xc1\x34\x89\x73\xfe\x35\x1f\xb9\x9c\x66\x9c\xc5\xee\x1c\x28\xe9\x38" +
	"\xf1\xa2\x72\xc7\x72\x9b\xa4\x33\x46\x2e\x80\xe5\x74\x24\x13\xdb\x36\xb9\xda\x8d\x2b\x7c\xc6\x0a\xcc\x06\x1b\xb1" +
	"\x93\xda\x80\x39\xee\x50\x4f\x06\xd3\x94\xb3\x9c\x43\xbe\x78\xe0\x67\xe1\x92\x84\xc0\x32\xe0\xf1\x7c\x06\xc3\xf7" +
	"\xfb\xfa\x5b\xad\x0e\xf5\xfb\x11\xbc\xc7\x66\xad\xe8\xef\x6e\x73\xd4\xd2\x7e\xaa\xd4\x5a\xbd\xbf\xfa\x68\x1d\xb1" +
	"\xdd\xae\x51\xcf\xa2\x02\x6d\x84\xd9\x6b\x58\xa9\xc6\x73\x29\x8a\x42\xed\x6b\x73\xe1\x55\xb4\x36\x4b\xb2\xf1\xbd" +
	"\xd6\x78\x20\x7c\x27\xc7\xd2\x7a\x2f\xa5\xd1\xcb\x1d\xd6\xa5\xac\xd7\xf4\x42\xef\x35\x7d\xc3\xb2\x8b\x20\xa9\x11" +
	"\x1a\x2c\x54\x53\xc2\x0e\x7d\xe7\x7b\x8d\xcd\x04\x62\x3c\x54\x47\x28\x1a\x14\x06\x4b\x4f\xba\x6b\xd4\x4a\x56\xa8" +
	"\x41\x34\x48\x30\xb5\x32\xf0\x2c\xb5\x7c\xaa\x10\x64\x0d\x1a\x45\x53\x6c\xa0\x41\xbd\xaf\x8c\x86\x7d\x6d\xa4\xad" +
	"\xe5\x91\xf4\xa1\x8b\x70\x04\x87\x8d\x2c\x36\x64\xbf\xc6\x1a\x1b\x51\x55\x47\x68\xf0\x7f\x7b\xd9\xa0\x06\xb3\x11" +
	"\x06\x04\x6c\x65\x2d\xb7\x54\x21\x34\xa0\x56\x20\xeb\x95\x6a\xb6\xc2\x48\x55\x83\xd4\xb0\x92\x55\x85\x25\xc8\x9a" +
	"\x40\x86\x46\xc1\x13\xa5\x63\x81\x5a\xc3\x91\x03\x3a\xa8\x7d\x55\xc2\x7f\xf7\xda\x90\x0a\x6e\x85\xac\x46\x50\x8b" +
	"\x2d\x82\xa8\xbd\xc4\x08\x86\x0e\xf3\xaa\x1b\x9a\x7c\x83\x20\x4a\xc2\xd2\xa6\x11\x46\x3e\x53\x7e\x06\x9b\x95\x28" +
	"\x10\xf4\x46\x1d\x34\xd4\x78\xf0\xea\xa1\xe1\x5d\x5b\x6f\x32\xef\x0e\xeb\x1d\xa8\xba\x40\xf2\x73\x99\x50\x29\x8c" +
	"\xa0\x4c\x64\x5d\x54\xfb\x12\xcb\x93\xe3\x24\x48\x3e\x00\x0b\x02\xf8\xfc\xd9\x76\x75\xca\xa6\x34\x61\x2c\x9f\x67" +
	"\x7d\x79\xc4\xf2\xeb\x28\x89\x21\x4a\xa6\xae\x95\x69\xde\x46\x70\xc7\x93\x69\x12\xf0\x80\x3a\x3b\xe3\xf9\xfc\x01" +
	"\xf2\x70\xc6\x3f\x9d\x7a\x89\xdd\x44\x5e\x0b\x6b\x18\x0e\x00\x64\x09\xfd\x27\xe3\x69\xc8\x22\x78\x48\xc3\x19\x4b" +
	"\x17\xf0\x99\x2f\x46\x03\x70\xe5\xf3\xd5\x68\xe4\x60\x1e\x87\x5f\xe6\xdc\x12\x41\x3c\x8f\x22\x52\xb4\x73\xe1\x3f" +
	"\x17\x23\xd3\xe9\x42\xc0\x6f\xd9\x3c\xca\xe1\x3c\x3a\x03\x70\xc7\x73\xe9\x86\x04\xda\x34\x88\x66\x29\xca\xb2\x41" +
	"\xad\x3d\x41\x21\xcd\xf1\x55\x8b\x9d\xd2\xa6\x50\x25\xbe\x10\xd8\x09\x6b\x8e\xaf\x58\x6c\x54\x8d\xaf\x41\x1d\xf0" +
	"\x49\x4b\x83\x2f\x05\x95\xa8\xd7\x7b\xb1\x46\xed\x0b\xfe\xfd\x1f\x1b\xf0\x46\x35\x66\xd9\x36\x89\x6f\xb3\xda\x57" +
	"\x95\xff\xde\x4b\xd1\x12\xc2\xf9\xb9\x18\xfb\x53\xc1\xec\xd4\x53\x22\x6e\x46\x97\xc2\x74\xde\xc3\x19\xcf\x72\x36" +
	"\x7b\xc8\xff\xf5\xb2\xce\xb5\x3a\x0c\xaf\x06\x2d\x07\x3c\x6e\xb0\x06\xe1\x4d\xb7\xa5\x0d\xfa\x2e\x9b\xae\xb3\x69" +
	"\x8c\x94\xc6\x56\x44\x53\x5c\x2b\x3b\x2d\x72\xbb\xc5\x52\x0a\x83\x76\x76\x57\x15\x16\xc6\x0e\xa4\xed\xf5\xdd\xfe" +
	"\xa9\x92\x05\x3c\x4b\x3c\x50\xaf\xf7\x10\x27\x10\xd6\xda\xa0\x28\xed\xcc\x6d\x7c\xe8\x0d\x56\x16\x42\x40\xa3\x5a" +
	"\x43\xa9\xc1\x08\x62\x17\xa1\x41\xc0\xaf\x59\x12\x8f\x9f\x84\x46\x6b\xbc\x92\x58\x95\x2d\x61\xef\x84\x29\x36\xf0" +
	"\x84\xe6\x80\xf8\x32\x86\x76\xd6\x69\x64\xab\xa3\x75\xe8\x10\x9e\xb1\xd1\xc4\x28\x2e\xc6\x73\x84\xb6\x32\xfd\xd8" +
	"\x3a\xf2\x82\xa7\x23\x08\x4b\x3b\x1e\x3d\xa8\x66\xe4\x00\x6c\x14\xc4\x4f\xaa\x2a\x6d\x39\x8c\xf2\x91\xbb\xfa\x6c" +
	"\x85\x63\x2e\x6f\x0c\x6d\x96\x13\x60\xf5\x11\xf0\xbb\x69\x44\xeb\xfa\x09\x57\xea\xe4\x5d\x54\x36\x14\x0f\xbc\xab" +
	"\x61\xeb\xb8\xf6\x2b\xa6\x95\xa3\x40\x07\x54\x88\x9a\x18\xf0\x94\x86\xa8\x2a\x10\xc6\xd2\xd3\xe4\x0d\x6e\xe8\x2e" +
	"\x90\xa5\x43\x78\x49\x14\xaf\xb3\xc4\xd9\x9e\xb4\xc3\x38\xe7\xb4\x9a\x5c\xb0\x04\xa4\xfc\x96\xa7\x3c\x9e\xf2\xcc" +
	"\xab\xc2\x50\x96\x57\x40\x4c\xc6\x23\x9e\x73\x98\xb2\x6c\xca\x02\x6e\xc7\xd2\x26\xd8\x3d\xd4\x07\x37\x96\x91\xec" +
	"\x51\x76\xcd\xff\xf3\xad\xcf\xf6\xdf\x65\x25\x45\x73\xec\x6a\x65\x54\x23\xeb\xf5\xcb\x9b\x0e\xe4\x96\x46\x7b\x72" +
	"\xa6\xde\xe9\x3d\x8b\xef\xb8\xdb\x3a\xf2\x84\xf6\x10\x60\x31\xf0\xaf\x39\x4f\x63\x16\x41\x38\x63\x77\x1c\x66\x2c" +
	"\x66\x77\x7c\xc6\x63\xe2\xe0\xf4\xb7\x70\xca\xfb\x35\x76\xa8\x7f\x6e\x49\xf1\xbb\xc1\xda\xb6\xff\x89\xca\x7d\x0e" +
	"\xb7\x17\xd4\xe9\xb9\x59\xe4\x9c\x75\xd5\xa3\xb5\x94\x47\x7c\x9a\x83\x2c\x47\xfe\xa5\x3a\x6a\xa5\xed\xd3\xe7\xeb" +
	"\x91\xa5\xe9\xd1\x89\x93\x47\x1d\x09\x8f\x1c\xe9\x5e\x18\xef\x36\xca\xa8\xd1\x05\x85\xde\xa6\xc9\xcc\x9f\x9a\x47" +
	"\x5a\xd0\xa9\x84\x61\xdc\x59\x0f\xdb\xd0\x7a\x35\xeb\xdb\x2d\xf5\x0e\x0b\x29\x2a\x69\x24\x76\x18\xa7\x57\x47\xd2" +
	"\xff\x07\x7c\x6a\x73\xcd\x7c\x55\xda\xd3\x50\x14\x9b\x8b\xfd\xd0\x5f\x1a\xd4\x8e\x76\x14\x51\x81\x2c\x54\xed\x28" +
	"\x0a\xd6\xf2\xd9\x2e\x36\x48\x7b\x0b\xda\xeb\x4d\xad\x40\xd4\x4e\x87\xf6\x26\x69\xec\x3a\x45\x1c\x2f\x0b\xdb\x8d" +
	"\x62\x8d\x23\xda\x04\x51\x6b\x9a\x56\x4d\xe2\x8d\x31\x3b\xfd\xe1\xfa\xfa\x70\x38\x4c\x0c\x56\x38\x6e\xc3\xc0\x89" +
	"\x30\xd7\xae\xa5\xae\xff\x4e\x98\xff\xbc\x18\xe9\x5e\xbe\xbd\xa6\x7b\xa3\xdf\xba\xfb\xbb\x7f\x6f\xbb\xdb\xee\x09" +
	"\x2b\xff\xc6\xb2\x39\x9c\x5f\x0c\xa0\xed\xcb\xa1\xb5\x70\xfa\xa7\xb9\xfb\x55\x11\x47\xd9\x91\xeb\xef\xbc\xa7\x4f" +
	"\xd7\xe7\x83\x80\xad\xa8\x8f\x63\xa3\xc6\xf4\x17\x1a\xac\xec\xfa\xf7\x26\x5b\xbd\x9d\xe4\xcf\x8f\xd6\x69\xb6\xfe" +
	"\xe0\x2c\xf5\xbb\xe7\x35\x14\x3f\xba\xb7\x71\x64\x5d\xe2\xf7\x73\xc8\x1d\x4e\x37\x97\xb6\x8c\x54\xc7\x77\x33\xb1" +
	"\x96\x05\x54\xb2\xfe\xf6\x0e\x2a\xb5\xa6\xaa\xaa\x6f\x58\xeb\x8b\xea\x58\xd1\xd2\x89\x6c\x4d\xec\xc7\x16\x7d\x7a" +
	"\xcf\xd2\xe1\xdf\xae\xdc\x97\x1f\xac\x7a\x96\x1a\xba\xe7\x95\x6d\xaf\x5b\x80\xfc\xae\xc0\xef\x3b\xda\xe6\x2d\x33" +
	"\xfb\xb4\xdc\x4b\xa5\x0d\x35\x8c\x03\xfe\xb5\x17\xea\xd2\x99\x97\x4b\x57\x8f\x24\xee\x49\x87\x67\xf0\x6e\x48\x51" +
	"\x5b\x22\x0b\x03\x37\xa3\x56\xfb\xb2\x16\xda\x29\x5d\xd4\xc1\x26\xf7\x53\x74\xfb\x07\x5a\xe2\x74\x4e\x81\x90\xd5" +
	"\xd1\x8d\xb5\x36\xb2\xd0\x20\x9e\xd4\xde\xeb\x76\xb7\xbe\x51\xe8\xb4\xa2\x94\x58\xe1\x8f\x5b\xfc\x0c\xf4\xea\xda" +
	"\xfe\x66\x97\x97\xc2\xe0\xa5\x66\x40\x1e\x2e\xef\x90\xee\xb6\x2c\xf6\x4d\x83\xb5\x59\x92\xa1\xdd\xc9\xf1\xb0\xf4" +
	"\x78\xb7\xd7\x9d\x9d\xcd\x5f\xad\x27\xca\x01\xcb\x9e\xf2\x0b\xc5\x8e\x0e\xda\xf2\xb8\xff\x1a\xcf\xc9\xbd\x38\x38" +
	"\x92\xff\x28\xf9\xdf\x4f\xda\x26\xfb\xbb\x59\x7a\xdc\xf3\x62\xf6\x7e\x72\x98\x53\xee\x7e\x3e\xb1\x70\x36\x70\xf7" +
	"\x8f\xc1\x2b\xc5\x3a\x51\x25\x0c\x6d\x00\x9e\xfb\xab\x53\x07\x9d\x7e\xda\x0a\xd4\xa1\x1e\x0c\x82\x34\x79\x78\xab" +
	"\x2c\x1f\x7d\xe9\x6b\x4d\xf3\xb1\x6f\xee\xc6\xa1\xf7\xd2\x1f\xb3\xb7\xe0\xbc\xdc\xfb\x80\x6f\x09\xde\x58\x28\x7b" +
	"\x3a\xee\xf6\x7a\xdd\xec\xf4\xfa\xe5\xcf\x20\xbe\xa4\x7f\x57\x7d\x1c\xfc\x3f\x00\x00\xff\xff\x99\x56\x8d\xd6\x18" +
	"\x14\x00\x00")

func bindataMigrations0001initialschemasqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations0001initialschemasql,
		"migrations/0001-initial-schema.sql",
	)
}



func bindataMigrations0001initialschemasql() (*asset, error) {
	bytes, err := bindataMigrations0001initialschemasqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "migrations/0001-initial-schema.sql",
		size: 5144,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1586791918, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-initial-schema.sql": bindataMigrations0001initialschemasql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"migrations": {Func: nil, Children: map[string]*bintree{
		"0001-initial-schema.sql": {Func: bindataMigrations0001initialschemasql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
