// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/0001-initial-schema.sql

package db


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMigrations0001initialschemasql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x4d\x73\xe3\x38\xce\xbe\xfb\x57\xa0\xfa\xd2\xce\x8c\xed\xbc\xa7" +
	"\xf7\xd0\xbd\xb3\x53\x8c\xc5\x24\xda\x96\x25\xb7\x24\x4f\xb7\x77\x6b\xcb\xc5\x48\xb4\xcd\x6d\x99\xf4\x88\x54\x1c" +
	"\xff\xfb\x2d\x90\x92\x2c\xf9\x23\x3d\xab\x4b\x12\x12\x00\x81\x07\x0f\x40\x30\xe3\x31\xfc\xba\x13\x9b\x92\x19\x0e" +
	"\x8b\xfd\x60\x30\x1e\xc3\xd7\x05\x4d\x52\x3f\x0a\x3f\xc1\xb7\x67\x92\x7e\x4c\x20\x7d\xa6\x10\xfb\x4f\xcf\x29\x7c" +
	"\x23\x4b\x48\x23\x78\x26\xa1\x17\x50\xf0\x48\x4a\x1e\x48\x42\x61\x31\xf7\x48\x4a\x13\x20\xa1\x87\x06\x9e\xfd\x24" +
	"\x8d\xe2\x25\x3c\xd3\x98\xfe\x0e\xc9\x73\xb4\x08\xbc\x76\xf1\x81\x02\x0d\x7c\x8f\x7a\x23\xf0\x27\x74\x62\x8d\xa3" +
	"\x21\x48\xdd\x61\x28\x45\xad\x19\x3f\x6c\x37\xed\x29\x7e\x02\x24\x08\xa2\x6f\xd4\x83\x28\x0c\xac\x23\x33\x3f\x8e" +
	"\xa3\x18\xe8\x77\x32\x4d\x83\xa5\xf5\xd7\xea\x2c\x12\x1a\xa3\x89\x84\x2c\x93\x11\x84\x51\x8a\xc2\xd6\x72\xed\x87" +
	"\x3f\x25\x01\x0c\x49\xe8\x41\x18\x41\x10\x85\x4f\x34\x86\x69\x14\xc7\x74\x9a\xde\xd9\x13\x27\x83\xf1\x18\x2d\xcc" +
	"\x96\x90\x3e\xfb\xe1\x17\x3f\x7c\x02\xf2\x10\x2d\xd0\xbe\x9f\xa0\x2f\xe8\x2f\xf8\x8f\xb0\x8c\x16\xf0\x8d\x84\xf6" +
	"\x88\x07\x0a\x49\x1a\xfb\xd3\xb4\x96\x45\x4b\x68\x65\x1e\x47\x29\x9d\x22\xa8\x23\xf4\x2f\xb4\x4a\x5e\x64\x3d\x73" +
	"\x6e\xfd\x42\xc2\xe5\x2f\x5d\xe7\x2c\x26\x0f\x74\x19\x39\x4c\xeb\x54\xd0\xef\xf3\xc0\x9f\xfa\x18\x6c\x4c\xbf\x2e" +
	"\xfc\x98\x7a\x78\xee\x3c\x8e\xfe\xf0\x3d\x6a\x63\x7f\x5c\x84\xf6\x24\x12\xf8\xe9\x12\xa2\x47\xbb\x98\xf8\x29\x45" +
	"\x33\x69\x04\x7e\x9a\x58\x7c\x92\x89\x43\xd8\x4f\x60\x1a\x85\x29\xfd\x9e\x8e\x5c\x4c\x33\x4a\x42\x97\x07\x0c\x3a" +
	"\x8c\x3a\x5e\xb9\xb4\x3c\x46\xf1\x8c\xe0\x11\x40\x52\x4c\xc9\xc4\xd2\x26\x55\xfb\x71\xc1\x5f\x79\x01\x66\xcb\x4b" +
	"\xb6\x17\xda\x80\x39\xee\xb9\x9e\x0c\xa6\x31\x25\x29\x85\x74\x39\xa7\xa7\xcd\x15\x6e\x02\x49\x80\x86\x8b\x19\x0c" +
	"\x3f\x56\xf2\x87\x54\x07\xf9\x71\x04\x1f\x79\xb9\x51\xf8\x73\xbf\x3d\x6a\x61\x7f\x2b\xd4\x46\x7d\xbc\xfb\x6c\x0f" +
	"\x22\xfb\x7d\xa9\x5e\x59\x01\xda\x30\x53\x69\x58\xab\xb2\x73\x24\xcb\x32\x55\x49\x73\x76\x2a\xab\x75\x56\xa8\xd3" +
	"\x3d\x55\xf2\x03\xda\x67\x99\x11\xaf\x1c\x7f\xd3\x95\xde\x73\x99\xf3\xbc\x39\x2e\x92\x1c\x4a\x9e\xa9\x32\x87\x3d" +
	"\xef\x9e\x54\x69\x5e\x4e\x60\xa6\xb4\x81\x7d\xa9\xd6\xa2\xe0\x20\xe4\x5a\x95\x3b\x66\x84\x92\x20\x34\x68\xa3\x4a" +
	"\x9e\xa3\x11\x21\x51\x11\x0a\x21\x7f\xf0\xbc\x11\xd7\x60\xd8\x4b\xc1\x4f\x9e\x92\x87\xa0\x03\x90\x86\xe1\x00\x40" +
	"\xe4\xd0\xfd\x12\x1a\xfb\x24\x80\x79\xec\xcf\x48\xbc\x84\x2f\x74\x39\x1a\x00\xf0\x1d\x13\xc5\x49\x08\x93\x09\x8b" +
	"\xd0\xff\xba\xa0\x96\x62\xe1\x22\x08\x50\xac\x06\xac\xf9\xce\x40\xf1\xe8\x23\x59\x04\x29\x38\x4c\x06\x00\x05\xd3" +
	"\x66\x55\xa8\x8d\x90\x2b\x66\x00\x52\x7f\x46\x93\x94\xcc\xe6\xe9\x3f\x5b\x59\xa9\x0e\xc3\x3b\x94\xcd\x4a\xce\x0c" +
	"\xcf\xad\x20\xf4\x65\x1b\x0f\xfa\x4a\x83\x1a\xde\x79\x83\x45\x2f\x8d\xfa\x13\x28\xc9\x01\x97\x0e\xaa\x86\x5f\x5f" +
	"\xc1\x1f\x86\x0c\x8d\xec\xd8\x9b\xd8\x55\x3b\x50\x6b\xab\xb6\xaf\x5e\x0a\x91\x01\x93\xb9\xfb\x93\xcb\x5c\xc8\xcd" +
	"\x5d\x53\xd3\x21\x3f\x14\xc7\xc6\xe3\x8e\xc1\x36\x2d\xac\xe4\x20\x95\x81\x57\xa1\xc5\x8b\x4d\x2b\x68\xce\xca\x6c" +
	"\x0b\x25\xd7\x55\x61\x34\x5a\xa9\xa4\x11\x96\xeb\x47\x2b\xef\xc0\xe4\xf9\x08\x0e\x5b\x91\x6d\x61\xc3\x25\x2f\x59" +
	"\x51\x1c\xa1\xe4\x7f\x56\xa2\xc4\x6c\x6f\x99\x01\x06\x3b\x21\xc5\x8e\x15\x68\x43\x73\x83\x3e\x9f\xd1\x66\x2d\x8a" +
	"\x82\xe7\x78\xea\xd0\x28\x78\x41\xfa\x59\x43\xb5\xe2\xc8\x19\x3a\xa8\xaa\xb0\xdc\xfa\x4f\xa5\x0d\x4a\x59\x12\x8c" +
	"\x40\xb2\x1d\xb7\xa1\xf7\xcb\xf0\x6e\x02\xa4\xd0\x6a\x04\xba\x7a\xd1\xfc\xcf\x8a\xcb\x36\x60\x34\xc2\x73\x61\x4e" +
	"\x81\xef\x58\xde\xa2\xe8\xe2\x6c\xc2\x83\x97\x23\x30\x09\x2c\x47\x67\xb4\x29\x99\x51\x65\x83\x6b\xba\xe5\xb0\xe3" +
	"\xd9\x96\x49\xa1\x77\x36\x9f\x5b\x26\xf3\x42\xc8\x0d\x98\xad\xd0\x18\x9a\x51\xf0\x83\xf3\x3d\xec\x19\x62\xc3\x8b" +
	"\x4e\xaa\xd0\x42\x9d\xa9\x53\x26\x86\xb9\xd0\x46\xc8\x4d\x25\xf4\xd6\x1d\x8e\x65\xf4\xa2\x54\xc1\x99\x6c\x94\x33" +
	"\x55\x54\x3b\x79\x37\x41\x07\xd0\xca\x5a\x15\x85\x3a\x58\x3b\x4a\xbb\x0c\x5a\x86\x6b\xc8\x98\x04\xfe\x86\x90\x0c" +
	"\x53\xf8\xad\x43\xb7\x11\xcc\xe1\xb7\xf6\xd8\xbb\x4f\x4d\x44\x93\xb6\x64\xe6\x93\xfa\x34\x98\xaa\xdd\x8e\x4b\x53" +
	"\x8b\x48\x7e\x68\xea\xe9\xb1\xad\xac\x96\xd4\x6a\x6d\x05\x90\xaa\x97\xb4\xb2\xc8\xa2\x8d\xab\x5f\x83\x78\x83\xae" +
	"\x6b\x51\xae\xba\x5a\x21\xe2\x16\x6d\x29\x1c\x84\xd9\x82\x92\x2d\x88\x36\xa5\x93\x73\xd5\x5f\x1f\x6f\xa9\xf6\xf4" +
	"\x60\xa8\x64\x71\xac\x11\xbe\xe9\x63\xdb\xf7\x74\x1b\x94\x51\xa0\x10\x57\x90\x4a\x8e\x2d\x4d\x5c\xf4\x6d\xf5\xb5" +
	"\x0d\xb6\x0b\xd8\xc2\x02\x74\xda\xba\xc2\x32\xc8\x15\xa2\xf7\x1e\x5e\x9c\x95\x58\x35\x75\xa2\x1a\xe7\x0a\x47\x21" +
	"\xdd\xa5\x69\xc7\x32\x82\x20\xa4\xe1\xe5\x9a\x65\x1c\xf4\x56\x1d\xb4\xcd\xd9\xa9\x1b\x68\xf8\x50\x63\x63\xc1\xac" +
	"\xbb\xe6\x07\x50\x32\xe3\x96\x8f\x75\x61\x36\xe5\x9c\x33\xc3\x10\x12\x21\xb3\xa2\xca\x4f\x19\x24\xf2\xe8\xe0\x76" +
	"\x08\x1b\x85\xca\xa2\x6c\x1d\xad\xdb\x48\x21\xb0\x2b\xd9\x4d\x0b\xe2\x29\x07\xc3\xa6\x93\xb5\x2a\xaf\xbc\xd4\x42" +
	"\xc9\x91\xeb\x66\x98\x3d\xe6\x9c\xef\x17\x12\x88\x35\x9a\xb2\xd5\xc1\x8a\x92\xb3\xfc\xe8\xea\xa0\x6d\xbb\xee\x36" +
	"\x6b\x10\x8a\xbc\xe8\x13\x10\xcf\x83\x2f\x5f\xec\x70\x10\x93\x29\x0e\x2a\x24\x5d\x24\xfd\xfd\x80\xa4\xf7\x41\x14" +
	"\x42\x10\x4d\xdd\x44\x80\x63\xcb\x08\x9e\x68\x34\x8d\x3c\xea\xe1\x80\x90\xd0\x74\x31\xb7\x17\xc2\xef\xfd\x8b\xee" +
	"\x54\xe4\x97\xd7\xdc\xad\x8b\xee\x34\x3d\xd4\x0a\x7e\x98\x52\x1c\xde\xda\x4b\x26\xa6\x8f\x34\xa6\xe1\x94\x26\x9d" +
	"\xf2\x1e\x8a\xfc\x0e\xd0\x3b\x1a\xd0\x94\xc2\x94\x24\x53\xe2\x51\x34\xd8\x14\x75\xfb\x3d\x44\x51\x40\x49\x68\x0f" +
	"\xc3\x01\xa5\xfb\x9d\xcd\x2e\x17\x17\xdb\x69\x86\x19\x80\xeb\xc3\xdd\xcf\x8e\x58\xf6\x16\x2e\x39\x37\x2b\x96\xe7" +
	"\x25\xd7\xba\xb3\x91\x09\x73\xbc\xaa\xb1\x57\xda\x64\x2a\xe7\x17\x1b\x76\xd4\x29\x8f\x57\x34\xb6\x78\xf1\x5d\x31" +
	"\x75\xe0\x2f\x5a\x18\x7e\xb9\x51\x30\xb9\xa9\xd8\x86\xeb\xee\xc6\xbf\xfe\x6d\x1d\xde\xaa\xd2\xac\x1a\x2a\x75\x74" +
	"\xd6\x55\x51\x74\xd7\xdb\x0d\x24\xf8\x69\x18\xf8\x4b\xf3\xc0\x68\x30\x80\x66\x66\x19\x76\xd3\x3c\xaa\x73\xd4\x4e" +
	"\x0c\xa4\x7a\x13\x85\x60\xe5\xd1\x8d\x4f\x76\xca\x72\x77\xcc\xd9\x45\x0e\x62\x87\x01\x4d\x4e\x94\x9d\x3e\x93\xf0" +
	"\x89\xba\xa1\x37\x8d\x70\x0c\x06\x12\x02\xfd\x9e\xd2\x38\x24\x01\xf8\x33\xf2\x44\x61\x46\x42\xf2\x44\x67\x34\x44" +
	"\xee\xc6\x7f\xf8\x53\xda\xe7\xad\xb3\x7a\xc1\xda\xeb\x84\xad\x5d\xb1\x74\x6d\xb8\x7a\x36\x99\x75\x29\xdb\xd4\xc4" +
	"\x6d\xc2\xf2\x37\xc3\x25\xd6\x7c\x33\xe7\x75\x07\x3c\xdb\x79\x1a\x22\x2f\x53\x4a\x1a\xcc\xf0\x2d\x44\x03\x3a\x4d" +
	"\x01\x01\xed\x4c\x0a\xa3\x7a\xb7\xfe\xfa\xdc\x1c\x59\x4a\x8e\x5a\xfe\x8d\x1a\xc2\x8d\x1c\xc1\xce\x94\xf7\x5b\x65" +
	"\x70\xc0\xe8\xd1\xe5\x31\x8e\x66\xdd\x99\xf6\x1b\xbe\x0a\x11\x38\x3f\x6c\xb4\x87\xb5\x6b\xbd\xe2\xee\xeb\xad\xf4" +
	"\x9e\x67\x82\x15\xc2\x08\xde\xd8\x68\x97\x8e\x28\xff\x1b\xfc\x5e\xc7\x9a\x74\x45\xb1\xbd\x71\x96\x6d\xcf\xa6\xa1" +
	"\xee\x5d\xa0\xf6\x38\x78\xb1\x02\x44\xa6\x24\xac\x05\x2f\x72\xd8\x88\x57\x3b\xb0\x71\x1c\xc6\xb8\x2d\x65\xb5\xc6" +
	"\x2b\xc9\xca\xe0\x3c\x28\x8c\xed\xa6\x38\x1f\x88\xcc\x72\x90\x6d\xf8\x08\x9f\x1f\x5c\x6b\x9e\x03\xb3\x43\xe2\xd6" +
	"\x98\xbd\xfe\x74\x7f\x7f\x38\x1c\x26\x86\x17\x7c\x5c\xbb\xc1\x27\xcc\xdc\x3b\x22\xdd\xff\x0d\x6d\xfe\xfd\xec\x15" +
	"\xd0\x8b\xb7\x47\xb5\x1b\x8d\xb1\xe9\x55\xfd\x1e\xe5\x2a\xfb\x85\x17\xdd\xea\xb4\x31\x9c\x16\xda\xba\x1b\x5a\x0d" +
	"\x27\xdf\x56\xdb\x3f\x14\xbe\x5d\x6c\xa1\xf5\x1f\x5a\x75\x82\xef\x4f\x69\x80\x1d\x93\xc7\xb1\x51\x63\xfc\x09\x25" +
	"\x2f\xec\x44\x7b\xeb\x79\xb3\xba\x1d\xe2\x5f\x2d\xa8\x4e\xff\xff\x9f\x6a\xa8\xcf\x9c\x6b\x36\xba\xbe\xdd\xb6\x23" +
	"\x64\xce\xdf\x4e\x0e\x9f\xdf\x45\x16\x42\xc4\xf0\xc3\x8c\x6d\x44\x66\x5f\x7f\x1f\xc0\x3e\xa8\xc0\xa8\x1f\x5c\xea" +
	"\x33\x6c\xdc\x5b\xcb\x6d\x59\x44\xec\xaf\xb5\xf5\xe9\x33\x89\x87\xff\x7f\xe7\xfe\x78\xe7\xfd\x67\x9b\x42\xf3\x5d" +
	"\x79\x04\x36\x8d\xbe\xd7\xaf\xdf\xf6\xf8\x42\xb9\x78\xe6\xf5\x42\xa9\x5d\xf5\x43\x8f\x7e\xef\xb9\xba\x72\xea\xf9" +
	"\xca\xe1\x11\x85\xbd\xdd\xe1\xc9\x78\x53\xa0\x5c\xdb\x06\xe6\x7b\xae\x3e\xad\xf4\x39\x16\xda\x09\x5d\xe2\x50\x47" +
	"\xf8\xee\x60\x70\x25\xa3\x3f\x1b\x06\xda\x64\x79\x4c\x14\x47\x57\xd7\xda\x88\x4c\x03\x7b\x51\x95\xe9\x10\xdf\x8d" +
	"\x5a\x4a\xda\x47\x56\xce\x0b\xfe\x3e\xcb\x4f\x86\xae\xce\x39\x37\x89\x9e\x33\xc3\xcf\x25\x3d\x3c\xe1\xfc\xfa\x68" +
	"\xae\xd1\xac\x2a\x4b\x2e\xcd\x0a\x15\xed\x00\xc2\x0f\xab\x4e\xe3\xed\x51\xb4\xd1\xf9\x3f\x7b\x12\xc6\xc0\xf3\x9e" +
	"\xf0\x85\x60\xd3\x0f\x6a\x78\xdc\x73\xf8\x14\xdc\x45\xf6\x70\xff\xbd\xe0\x7f\x1e\xb4\x0d\xf6\xa7\x51\x76\xda\xcf" +
	"\xbb\xc3\xe0\x3b\x15\x1d\x53\xf7\x4f\x3b\x6b\xce\x3a\xee\xa6\xa0\x2b\x60\x75\x66\x14\xeb\x40\xe7\xf8\xbb\x96\x41" +
	"\xed\x3f\x54\x3d\x75\x90\x83\x81\x17\x47\xf3\x5b\xb0\x7c\xee\xee\x5e\x23\xcd\xe7\xbe\xba\xab\x89\xde\x62\xb7\xd6" +
	"\x6e\x99\xeb\xc4\xde\x37\x78\x6b\xc3\x5d\x4d\xbd\xa5\xa6\xad\x5e\x3f\xa3\x5d\xbe\xfc\x6f\x5b\x77\xa7\x7f\x3b\x7d" +
	"\x1e\xfc\x37\x00\x00\xff\xff\x84\xb7\x5a\xb5\x7f\x16\x00\x00")

func bindataMigrations0001initialschemasqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations0001initialschemasql,
		"migrations/0001-initial-schema.sql",
	)
}



func bindataMigrations0001initialschemasql() (*asset, error) {
	bytes, err := bindataMigrations0001initialschemasqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "migrations/0001-initial-schema.sql",
		size: 5759,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1586882153, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-initial-schema.sql": bindataMigrations0001initialschemasql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"migrations": {Func: nil, Children: map[string]*bintree{
		"0001-initial-schema.sql": {Func: bindataMigrations0001initialschemasql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
