// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/0001-initial-schema.sql

package db


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMigrations0001initialschemasql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\xd1\x72\xe2\x3a\xd2\xbe\xe7\x29\xba\xe6\x66\xc8\x39\x40\xfe\xab" +
	"\xff\x62\x66\x67\xa7\x14\xac\x24\xde\x31\x36\x63\x9b\x33\x61\xb7\xb6\x28\xc5\x16\xa0\x1d\x23\x71\x2c\x39\x84\xb7" +
	"\xdf\x6a\xc9\x36\x36\x81\xcc\x59\xdf\x24\x91\xba\x5b\xdd\x5f\x7f\xdd\x6a\x65\x3c\x86\xdf\x77\x62\x53\x32\xc3\x61" +
	"\xb1\x1f\x0c\xc6\x63\xf8\xbe\xa0\x49\xea\x47\xe1\x27\xf8\xf1\x48\xd2\x8f\x09\xa4\x8f\x14\x62\xff\xe1\x31\x85\x1f" +
	"\x64\x09\x69\x04\x8f\x24\xf4\x02\x0a\x1e\x49\xc9\x1d\x49\x28\x2c\xe6\x1e\x49\x69\x02\x24\xf4\xd0\xc0\xa3\x9f\xa4" +
	"\x51\xbc\x84\x47\x1a\xd3\xaf\x90\x3c\x46\x8b\xc0\x6b\x17\xef\x28\xd0\xc0\xf7\xa8\x37\x02\x7f\x42\x27\xd6\x38\x1a" +
	"\x82\xd4\x1d\x86\x52\xd4\x9a\xf1\xc3\x76\xd3\x9e\xe2\x27\x40\x82\x20\xfa\x41\x3d\x88\xc2\xc0\x3a\x32\xf3\xe3\x38" +
	"\x8a\x81\x3e\x91\x69\x1a\x2c\xad\xbf\x56\x67\x91\xd0\x18\x4d\x24\x64\x99\x8c\x20\x8c\x52\x14\xb6\x96\x6b\x3f\xfc" +
	"\x29\x09\x60\x48\x42\x0f\xc2\x08\x82\x28\x7c\xa0\x31\x4c\xa3\x38\xa6\xd3\xf4\xc6\x9e\x38\x19\x8c\xc7\x68\x61\xb6" +
	"\x84\xf4\xd1\x0f\xbf\xf9\xe1\x03\x90\xbb\x68\x81\xf6\xfd\x04\x7d\x41\x7f\xc1\xbf\x87\x65\xb4\x80\x1f\x24\xb4\x47" +
	"\xdc\x51\x48\xd2\xd8\x9f\xa6\xb5\x2c\x5a\x42\x2b\xf3\x38\x4a\xe9\x14\x41\x1d\xa1\x7f\xa1\x55\xf2\x22\xeb\x99\x73" +
	"\xeb\x37\x12\x2e\x7f\xeb\x3a\x67\x31\xb9\xa3\xcb\xc8\x61\x5a\xa7\x82\x3e\xcd\x03\x7f\xea\x63\xb0\x31\xfd\xbe\xf0" +
	"\x63\xea\xe1\xb9\xf3\x38\xfa\xc3\xf7\xa8\x8d\xfd\x7e\x11\xda\x93\x48\xe0\xa7\x4b\x88\xee\xed\x62\xe2\xa7\x14\xcd" +
	"\xa4\x11\xf8\x69\x62\xf1\x49\x26\x0e\x61\x3f\x81\x69\x14\xa6\xf4\x29\x1d\xb9\x98\x66\x94\x84\x2e\x0f\x18\x74\x18" +
	"\x75\xbc\x72\x69\xb9\x8f\xe2\x19\xc1\x23\x80\xa4\x98\x92\x89\xa5\x4d\xaa\xf6\xe3\x82\xbf\xf0\x02\xcc\x96\x97\x6c" +
	"\x2f\xb4\x01\x73\xdc\x73\x3d\x19\x4c\x63\x4a\x52\x0a\xe9\x72\x4e\x4f\x9b\x2b\xdc\x04\x92\x00\x0d\x17\x33\x18\x7e" +
	"\xac\xe4\x4f\xa9\x0e\xf2\xe3\x08\x3e\xf2\x72\xa3\xf0\xe7\x7e\x7b\xd4\xc2\xfe\x56\xa8\x8d\xfa\x78\xf3\xd9\x1e\x44" +
	"\xf6\xfb\x52\xbd\xb0\x02\xb4\x61\xa6\xd2\xb0\x56\x65\xe7\x48\x96\x65\xaa\x92\xe6\xec\x54\x56\xeb\xac\x50\xa7\x7b" +
	"\xaa\xe4\x07\xb4\xcf\x32\x23\x5e\x38\xfe\xa6\x2b\xbd\xe7\x32\xe7\x79\x73\x5c\x24\x39\x94\x3c\x53\x65\x0e\x7b\xde" +
	"\x3d\xa9\xd2\xbc\x9c\xc0\x4c\x69\x03\xfb\x52\xad\x45\xc1\x41\xc8\xb5\x2a\x77\xcc\x08\x25\x41\x68\xd0\x46\x95\x3c" +
	"\x47\x23\x42\xa2\x22\x14\x42\xfe\xe4\x79\x23\xae\xc1\xb0\xe7\x82\x9f\x3c\x25\x77\x41\x07\x20\x0d\xc3\x01\x80\xc8" +
	"\xa1\xfb\x25\x34\xf6\x49\x00\xf3\xd8\x9f\x91\x78\x09\xdf\xe8\x72\x34\x00\xe0\x3b\x26\x8a\x93\x10\x26\x13\x16\xa1" +
	"\xff\x7d\x41\x2d\xc5\xc2\x45\x10\xa0\x58\x0d\x58\xf3\x9d\x81\xe2\xd1\x7b\xb2\x08\x52\x70\x98\x0c\x00\x0a\xa6\xcd" +
	"\xaa\x50\x1b\x21\x57\xcc\x00\xa4\xfe\x8c\x26\x29\x99\xcd\xd3\x7f\xb6\xb2\x52\x1d\x86\x37\x28\x9b\x95\x9c\x19\x9e" +
	"\x5b\x41\xe8\xcb\x36\x1e\xf4\x95\x06\x35\xbc\xf3\x06\x8b\x5e\x1a\xf5\x27\x50\x92\x03\x2e\x1d\x54\x0d\xbf\xbe\x80" +
	"\x3f\x0c\x19\x1a\xd9\xb1\x57\xb1\xab\x76\xa0\xd6\x56\x6d\x5f\x3d\x17\x22\x03\x26\x73\xf7\x27\x97\xb9\x90\x9b\x9b" +
	"\xa6\xa6\x43\x7e\x28\x8e\x8d\xc7\x1d\x83\x6d\x5a\x58\xc9\x41\x2a\x03\x2f\x42\x8b\x67\x9b\x56\xd0\x9c\x95\xd9\x16" +
	"\x4a\xae\xab\xc2\x68\xb4\x52\x49\x23\x2c\xd7\x8f\x56\xde\x81\xc9\xf3\x11\x1c\xb6\x22\xdb\xc2\x86\x4b\x5e\xb2\xa2" +
	"\x38\x42\xc9\xff\xac\x44\x89\xd9\xde\x32\x03\x0c\x76\x42\x8a\x1d\x2b\xd0\x86\xe6\x06\x7d\x3e\xa3\xcd\x5a\x14\x05" +
	"\xcf\xf1\xd4\xa1\x51\xf0\x8c\xf4\xb3\x86\x6a\xc5\x91\x33\x74\x50\x55\x61\xb9\xf5\x9f\x4a\x1b\x94\xb2\x24\x18\x81" +
	"\x64\x3b\x6e\x43\xef\x97\xe1\xcd\x04\x48\xa1\xd5\x08\x74\xf5\xac\xf9\x9f\x15\x97\x6d\xc0\x68\x84\xe7\xc2\x9c\x02" +
	"\xdf\xb1\xbc\x45\xd1\xc5\xd9\x84\x07\xcf\x47\x60\x12\x58\x8e\xce\x68\x53\x32\xa3\xca\x06\xd7\x74\xcb\x61\xc7\xb3" +
	"\x2d\x93\x42\xef\x6c\x3e\xb7\x4c\xe6\x85\x90\x1b\x30\x5b\xa1\x31\x34\xa3\xe0\x27\xe7\x7b\xd8\x33\xc4\x86\x17\x9d" +
	"\x54\xa1\x85\x3a\x53\xa7\x4c\x0c\x73\xa1\x8d\x90\x9b\x4a\xe8\xad\x3b\x1c\xcb\xe8\x59\xa9\x82\x33\xd9\x28\x67\xaa" +
	"\xa8\x76\xf2\x66\x82\x0e\xa0\x95\xb5\x2a\x0a\x75\xb0\x76\x94\x76\x19\xb4\x0c\xd7\x90\x31\x09\xfc\x15\x21\x19\xa6" +
	"\xf0\xa5\x43\xb7\x11\xcc\xe1\x4b\x7b\xec\xcd\xa7\x26\xa2\x49\x5b\x32\xf3\x49\x7d\x1a\x4c\xd5\x6e\xc7\xa5\xa9\x45" +
	"\x24\x3f\x34\xf5\x74\xdf\x56\x56\x4b\x6a\xb5\xb6\x02\x48\xd5\xb7\xb4\xb2\xc8\xa2\x8d\x8b\x5f\x83\x78\x83\xae\x6b" +
	"\x51\xae\xba\x5a\x21\xe2\x16\x6d\x29\x1c\x84\xd9\x82\x92\x2d\x88\x36\xa5\x93\x73\xd5\xdf\xef\xaf\xa9\xf6\xf4\x60" +
	"\xa8\x64\x71\xac\x11\xbe\xea\x63\xdb\xf7\x74\x1b\x94\x51\xa0\x10\x57\x90\x4a\x8e\x2d\x4d\x5c\xf4\x6d\xf5\xb5\x0d" +
	"\xb6\x0b\xd8\xc2\x02\x74\xda\xba\xc0\x32\xc8\x15\xa2\xf7\x1e\x5e\x9c\x95\x58\x35\x75\xa2\x1a\xe7\x0a\x47\x21\xdd" +
	"\xa5\x69\xc7\x32\x82\x20\xa4\xe1\xe5\x9a\x65\x1c\xf4\x56\x1d\xb4\xcd\xd9\xa9\x1b\x68\xf8\x50\x63\x63\xc1\xac\xbb" +
	"\xe6\x07\x50\x32\xe3\x96\x8f\x75\x61\x36\xe5\x9c\x33\xc3\x10\x12\x21\xb3\xa2\xca\x4f\x19\x24\xf2\xe8\xe0\x76\x08" +
	"\x1b\x85\xca\xa2\x6c\x1d\xad\xdb\x48\x21\xb0\x2b\xd9\x4d\x0b\xe2\x29\x07\xc3\xa6\x93\xb5\x2a\x2f\xbc\xd4\x42\xc9" +
	"\x91\xeb\x66\x98\x3d\xe6\x9c\xef\x17\x12\x88\x35\x9a\xb2\xd5\xc1\x8a\x92\xb3\xfc\xe8\xea\xa0\x6d\xbb\xee\x36\x6b" +
	"\x10\x8a\xbc\xe8\x13\x10\xcf\x83\x6f\xdf\xec\x70\x10\x93\x29\x0e\x2a\x24\x5d\x24\xfd\xfd\x80\xa4\xb7\x41\x14\x42" +
	"\x10\x4d\xdd\x44\x80\x63\xcb\x08\x1e\x68\x34\x8d\x3c\xea\xe1\x80\x90\xd0\x74\x31\xb7\x17\xc2\xd7\xfe\x45\x77\x2a" +
	"\xf2\xb7\xd7\xdc\xb5\x8b\xee\x34\x3d\xd4\x0a\x7e\x98\x52\x1c\xde\xda\x4b\x26\xa6\xf7\x34\xa6\xe1\x94\x26\x9d\xf2" +
	"\x1e\x8a\xfc\x06\xd0\x3b\x1a\xd0\x94\xc2\x94\x24\x53\xe2\x51\x34\xd8\x14\x75\xfb\xdd\x45\x51\x40\x49\x68\x0f\xc3" +
	"\x01\xa5\xfb\x9d\xcd\x2e\x6f\x2e\xb6\xd3\x0c\x33\x00\xd7\x87\xbb\x9f\x1d\xb1\xec\x2d\x5c\x72\x6e\x56\x2c\xcf\x4b" +
	"\xae\x75\x67\x23\x13\xe6\x78\x51\x63\xaf\xb4\xc9\x54\xce\xdf\x6c\xd8\x51\xa7\x3c\x5e\xd0\xd8\xe2\xc5\x77\xc1\xd4" +
	"\x81\x3f\x6b\x61\xf8\xdb\x8d\x82\xc9\x4d\xc5\x36\x5c\x77\x37\xfe\xf5\x6f\xeb\xf0\x56\x95\x66\xd5\x50\xa9\xa3\xb3" +
	"\xae\x8a\xa2\xbb\xde\x6e\x20\xc1\x4f\xc3\xc0\x5f\x9a\x07\x46\x83\x01\x34\x33\xcb\xb0\x9b\xe6\x51\x9d\xa3\x76\x62" +
	"\x20\xd5\xab\x28\x04\x2b\x8f\x6e\x7c\xb2\x53\x96\xbb\x63\xce\x2e\x72\x10\x3b\x0c\x68\x72\xa2\xec\xf4\x91\x84\x0f" +
	"\xd4\x0d\xbd\x69\x84\x63\x30\x90\x10\xe8\x53\x4a\xe3\x90\x04\xe0\xcf\xc8\x03\x85\x19\x09\xc9\x03\x9d\xd1\x10\xb9" +
	"\x1b\xff\xe1\x4f\x69\x9f\xb7\xce\xea\x1b\xd6\x5e\x26\x6c\xed\x8a\xa5\x6b\xc3\xd5\xb3\xc9\xac\x4b\xd9\xa6\x26\xae" +
	"\x13\x96\xbf\x1a\x2e\xb1\xe6\x9b\x39\xaf\x3b\xe0\xd9\xce\xd3\x10\x79\x99\x52\xd2\x60\x86\x6f\x21\x1a\xd0\x69\x0a" +
	"\x08\x68\x67\x52\x18\xd5\xbb\xf5\xd7\xe7\xe6\xc8\x52\x72\xd4\xf2\x6f\xd4\x10\x6e\xe4\x08\x76\xa6\xbc\xdf\x2a\x83" +
	"\x03\x46\x8f\x2e\xf7\x71\x34\xeb\xce\xb4\x3f\xf0\x55\x88\xc0\xf9\x61\xa3\x3d\xac\x5d\xeb\x15\x77\x5f\x6f\xa5\xf7" +
	"\x3c\x13\xac\x10\x46\xf0\xc6\x46\xbb\x74\x44\xf9\x2f\xf0\xb5\x8e\x35\xe9\x8a\x62\x7b\xe3\x2c\xdb\x9e\x4d\x43\xdd" +
	"\xbb\x40\xed\x71\xf0\x62\x05\x88\x4c\x49\x58\x0b\x5e\xe4\xb0\x11\x2f\x76\x60\xe3\x38\x8c\x71\x5b\xca\x6a\x8d\x57" +
	"\x92\x95\xc1\x79\x50\x18\xdb\x4d\x71\x3e\x10\x99\xe5\x20\xdb\xf0\x11\x3e\x3f\xb8\xd6\x3c\x07\x66\x87\xc4\xad\x31" +
	"\x7b\xfd\xe9\xf6\xf6\x70\x38\x4c\x0c\x2f\xf8\xb8\x76\x83\x4f\x98\xb9\x75\x44\xba\xfd\x1b\xda\xfc\xfb\xd9\x2b\xa0" +
	"\x17\x6f\x8f\x6a\x57\x1a\x63\xd3\xab\xfa\x3d\xca\x55\xf6\x33\x2f\xba\xd5\x69\x63\x38\x2d\xb4\x75\x37\xb4\x1a\x4e" +
	"\xbe\xad\xb6\x7f\x28\x7c\xbb\xd8\x42\xeb\x3f\xb4\xea\x04\xdf\x9e\xd2\x00\x3b\x26\x8f\x63\xa3\xc6\xf8\x13\x4a\x5e" +
	"\xd8\x89\xf6\xda\xf3\x66\x75\x3d\xc4\xbf\x5a\x50\x9d\xfe\xff\x3f\xd5\x50\x9f\x39\x97\x6c\x74\x7d\xbb\x6e\x47\xc8" +
	"\x9c\xbf\x9e\x1c\x3e\xbf\x8b\x2c\x84\x88\xe1\x87\x19\xdb\x88\xcc\xbe\xfe\x3e\x80\x7d\x50\x81\x51\x3f\xb9\xd4\x67" +
	"\xd8\xb8\xb7\x96\xdb\xb2\x88\xd8\x5f\x6b\xeb\xd3\x47\x12\x0f\xff\xff\xc6\xfd\xf1\xce\xfb\xcf\x36\x85\xe6\xbb\xf0" +
	"\x08\x6c\x1a\x7d\xaf\x5f\xbf\xee\xf1\x85\xf2\xe6\x99\xd7\x0b\xa5\x76\xd5\x0f\x3d\xfa\xd4\x73\x75\xe5\xd4\xf3\x95" +
	"\xc3\x23\x0a\x7b\xbb\xc3\x93\xf1\xa6\x40\xb9\xb6\x0d\xcc\xf7\x5c\x7d\x5a\xe9\x73\x2c\xb4\x13\x3a\xc3\xc1\x06\xf7" +
	"\xee\x4c\x70\x21\x99\xbf\x9a\x03\xda\x3c\x79\x4c\x14\x47\x57\xd2\xda\x88\x4c\x03\x7b\x56\x95\xe9\x70\xde\x4d\x59" +
	"\x4a\xda\xf7\x55\xce\x0b\xfe\x3e\xc1\x4f\x86\x2e\x8e\x38\x57\x39\x9e\x33\xc3\xcf\x25\x3d\x3c\xe1\xfc\xe6\x68\x6e" +
	"\xd0\xac\x2a\x4b\x2e\xcd\x0a\x15\xed\xec\xc1\x0f\xab\x4e\xcf\xed\xb1\xb3\xd1\xf9\x3f\x7b\x12\xc6\xc0\xf3\x9e\xf0" +
	"\x1b\xc1\xa6\x15\xd4\xf0\xb8\x97\xf0\x29\xb8\x37\x89\xc3\xfd\xf7\x82\xff\x75\xd0\x36\xd8\x5f\x46\xd9\xe9\x3c\xef" +
	"\xce\x81\xef\x14\x73\x4c\xdd\xff\xeb\xac\x39\xeb\xb8\x1b\x80\x2e\x80\xd5\x19\x4f\xac\x03\x9d\xe3\x6f\x5a\x06\xb5" +
	"\xff\x4b\xf5\xd4\x41\x0e\x06\x5e\x1c\xcd\xaf\xc1\xf2\xb9\xbb\x7b\x89\x34\x9f\xfb\xea\xae\x1c\x7a\x8b\xdd\x32\xbb" +
	"\x66\xae\x13\x7b\xdf\xe0\xb5\x0d\x77\x2b\xf5\x96\x9a\x8e\x7a\xf9\x8c\x76\xf9\xed\x3f\xda\xba\x3b\xfd\x8b\xe9\xf3" +
	"\xe0\xbf\x01\x00\x00\xff\xff\xdb\xcd\xd1\x44\x7a\x16\x00\x00")

func bindataMigrations0001initialschemasqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations0001initialschemasql,
		"migrations/0001-initial-schema.sql",
	)
}



func bindataMigrations0001initialschemasql() (*asset, error) {
	bytes, err := bindataMigrations0001initialschemasqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "migrations/0001-initial-schema.sql",
		size: 5754,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1586865365, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-initial-schema.sql": bindataMigrations0001initialschemasql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"migrations": {Func: nil, Children: map[string]*bintree{
		"0001-initial-schema.sql": {Func: bindataMigrations0001initialschemasql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
